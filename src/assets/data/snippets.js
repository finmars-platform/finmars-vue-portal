export default [
  ".name",
  ".short_name",
  ".user_code",
  ".name",
  ".short_name",
  ".user_code",
  ".name",
  ".short_name",
  ".user_code",
  ".name",
  ".short_name",
  ".user_code",
  ".name",
  ".short_name",
  ".user_code",
  "System Entities",
  "System Entities",
  "System Entities",
  "System Entities",
  "System Entities",
  "System Entities",
  "System Entities",
  "System Entities",
  "strategy1",
  "get_instrument_user_attribute_value([instrument], [User_attribute_reference_name])",
  "get_principal_price([date],[instrument], [policy], [default_value])",
  "get_accrued_price([date],[instrument], [policy], [default_value])",
  "convert_to_number([number], [separator], [decimal], [braces_boolean])",
  "days([number])",
  "now()",
  "parse_date([date_string], [format='%Y-%m-%d'])",
  "unix_to_date([unix_time], [format='%Y-%m-%d'])",
  "[date]+days([number])",
  "add_workdays([date],[number_workdays])",
  "random()",
  "min([number_1], [number_2])",
  "max([number_1], [number_2])",
  "round([number],[decimals_number])",
  "trunc([number])",
  "isclose([number_1], [number_2])",
  "int([string])",
  "abs([number])",
  "iff([any_variable]==[user_target], [returned_value_if_true], [returned_value_if_false])",
  "str([value])",
  "upper([string])",
  "lower([string])",
  "contains([string1],[string2])",
  "get_instrument_coupon([instr], [effective_date])",
  "get_instrument_accrued_price([instr], [trade_date])",
  "simple_price([date], [date1], [price1], [date2], [price2])",
  ".pricing_currency.user_code",
  ".pricing_currency.name",
  ".accrued_currency.user_code",
  ".accrued_currency.name",
  ".reference_for_pricing",
  ".price_multiplier",
  ".accrued_multiplier",
  ".maturity_date",
  ".maturity_price",
  ".default_price",
  ".public_name",
  ".name",
  ".reference_for_pricing",
  ".user_code",
  "transactions[0].instrument.user_code",
  "transactions[0].instrument.name",
  "transactions[0].instrument.short_name",
  "transactions[0].instrument.maturity_date",
  "transactions[0].portfolio.user_code",
  "transactions[0].portfolio.name",
  "transactions[0].portfolio.short_name",
  "transactions[0].account_cash.user_code",
  "transactions[0].account_cash.name",
  "transactions[0].account_cash.short_name",
  "transactions[0].account_cash.public_name",
  "transactions[0].account_position.user_code",
  "transactions[0].account_position.name",
  "transactions[0].account_position.short_name",
  "transactions[0].account_position.public_name",
  "transactions[0].account_interim.user_code",
  "transactions[0].account_interim.name",
  "transactions[0].account_interim.short_name",
  "transactions[0].account_interim.public_name",
  "transactions[0].counterparty.user_code",
  "transactions[0].counterparty.name",
  "transactions[0].counterparty.short_name",
  "transactions[0].responsible.user_code",
  "transactions[0].responsible.name",
  "transactions[0].responsible.short_name",
  "transactions[0].accounting_date",
  "transactions[0].cash_date",
  "transactions[0].notes",
  "transactions[0].position_size_with_sign",
  "transactions[0].principal_with_sign",
  "transactions[0].carry_with_sign",
  "transactions[0].overheads_with_sign",
  "transactions[0].cash_consideration",
  "transactions[0].transaction_currency.name",
  "transactions[0].transaction_currency.user_code",
  "transactions[0].settlement_currency.name",
  "transactions[0].settlement_currency.user_code",
  "position",
  "instrument",
  "portfolio",
  "account",
  "accrued_currency",
  "effective_date",
  "notification_date",
  "float([string])",
  "format_date([date], [format]='%Y-%m-%d')",
  "contains(a,b)",
  "date(year, month=1, day=1)",
  "timedelta(years=0, months=0, days=0, leapdays=0, weeks=0)",
  "add_weeks(date, days)",
  "format_number(number, decimal_sep='.', decimal_pos=None, grouping=3, thousand_sep='', use_grouping=False)",
  "simple_price(date, date1, value1, date2, value2)",
  "dynamic attributes ",
  "strategy2",
  "strategy3",
  "get_ttype_default_input([input])",
  "get_relation_by_user_code([content_type], [user_code])",
  "calculate_accrued([instrument], [date])",
  "add_fx_history([date], [currency], [pricing_policy], [fx_rate], [Overwrite])",
  "get_fx_rate([date], [currency], [pricing_policy], [Default])",
  "add_price_history([date], [instrument], [pricing_policy], [principal_price], [accrued_price], [Overwrite])",
  "get_factor([date], [instrument], [Default])",
  "if_null([input], [value if null])",
  "[number1]<=[number2][date1]<=[date2]",
  "[number1]=>[number2][date1]=>[date2]",
  "get_latest_principal_price([date-from],[date-to],[instrument], [policy], [default_value])",
  "[condition_1] and [condition_2]",
  "[condition_1] or [condition_2]",
  "[condition_1] and not [condition_2]",
  "set_instrument_field( [instrumentID], [parameter_name], [parameter_value])",
  "set_currency_field([currencyID], [parameter_name], [parameter_value])",
  "get_instrument_field( [instrumentID], [parameter_name])",
  "get_currency_field([currencyID], [parameter_name])",
  "get_instr_accrual_size()",
  "get_instr_accrual_factor()",
  "get_instr_accrued_price()",
  "get_instr_factor()",
  "get_instr_coupon_factor()",
  "get_instr_coupon()",
  "format_date2()",
  "parse_date2()",
  "get_date_last_month_end_business()",
  "get_date_last_quarter_end_business()",
  "get_date_last_year_end_business()",
  "get_next_coupon_date()",
  "generate_user_code()",
  "get_rt_value()",
  "add_days()",
  "add_FXHistory()",
  "add_PriceHistory()",
  "date_group()",
  "date_max()",
  "date_min()",
  "find_name()",
  "generateUserCode()",
  "get_AccruedPrice()",
  "get_Factor()",
  "get_FXRate()",
  "get_instrument_accrual_factor()",
  "get_instrument_accrual_size()",
  "get_instrument_coupon_factor()",
  "get_instrument_factor()",
  "get_PrincipalPrice()",
  "get_var()",
  "has_var()",
  "isleap()",
  "len()",
  "months()",
  "parse_number()",
  "range()",
  "simple_group()",
  "weeks()",
  "substr()",
  "reg_search()",
  "reg_replace()",
  "bool()",
  "get_default_portfolio()",
  "get_default_instrument()",
  "get_default_account()",
  "get_default_currency()",
  "get_default_transaction_type()",
  "get_default_instrument_type()",
  "get_default_account_type()",
  "get_default_pricing_policy()",
  "get_default_responsible()",
  "get_default_counterparty()",
  "get_default_strategy1()",
  "get_default_strategy2()",
  "get_default_strategy3()"
]
